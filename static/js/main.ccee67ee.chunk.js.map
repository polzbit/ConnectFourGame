{"version":3,"sources":["components/TileHole.js","components/Tile.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["TileHole","props","className","value","Tile","onClick","handleClick","Array","holes","length","map","x","j","Board","useState","boardState","fill","playerTurn","gameMode","gameSelected","showTitle","winner","current_move","history","win_history","state","setState","checkCol","a","b","c","d","checkWinner","currentTiles","col","row","selectedGame","mode","prevState","currentBoard","makeMove","slatID","boardCopy","arr","slice","indexOf","newSlat","reverse","useEffect","validMove","tile","Math","floor","random","turn","i","moveNum","desc","turnIndex","board","console","log","newWinMsg","generateBanner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRASeA,EARE,SAACC,GACd,OACI,qBAAKC,UAAU,WAAf,SACI,qBAAKA,UAAWD,EAAME,WCSnBC,EAXF,SAACH,GACV,OACI,qBAAKC,UAAU,OAAOG,QAAS,kBAAMJ,EAAMK,eAA3C,SAEQ,YAAIC,MAAMN,EAAMO,MAAMC,SAASC,KAAI,SAACC,EAAGC,GAAJ,OAC/B,cAAC,EAAD,CAAkBT,MAAOF,EAAMO,MAAMI,IAAtBA,SCqOpBC,EAzOD,WACV,MAA0BC,mBAAS,CAC/BC,WAAY,IAAIR,MAAM,GAAGS,KAAK,IAAIT,MAAM,GAAGS,KAAK,OAChDC,WAAY,MACZC,SAAU,GACVC,cAAc,EACdC,WAAW,EACXC,OAAQ,GACRC,aAAc,EACdC,QAAS,GACTC,YAAc,KATlB,mBAAOC,EAAP,KAAcC,EAAd,KAaMC,EAAW,SAACC,EAAGC,EAAGC,EAAGC,GACvB,OAAe,OAANH,GAAgBA,IAAMC,GAAOD,IAAME,GAAOF,IAAMG,GAIvDC,EAAc,SAACC,GACjB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACvB,GAAIR,EAASM,EAAaC,GAAKC,GAAMF,EAAaC,GAAKC,EAAM,GAAIF,EAAaC,GAAKC,EAAM,GAAIF,EAAaC,GAAKC,EAAM,IACjH,OAAOF,EAAaC,GAAKC,GAIrC,IAAK,IAAIA,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAID,EAAM,EAAGA,EAAM,EAAGA,IACvB,GAAIP,EAASM,EAAaC,GAAKC,GAAMF,EAAaC,EAAM,GAAGC,GAAMF,EAAaC,EAAM,GAAGC,GAAMF,EAAaC,EAAM,GAAGC,IAC/G,OAAOF,EAAaC,GAAKC,GAIrC,IAAK,IAAIA,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAID,EAAM,EAAGA,EAAM,EAAGA,IACvB,GAAIP,EAASM,EAAaC,GAAKC,GAAMF,EAAaC,EAAM,GAAGC,EAAM,GAAIF,EAAaC,EAAM,GAAGC,EAAM,GAAIF,EAAaC,EAAM,GAAGC,EAAM,IAC7H,OAAOF,EAAaC,GAAKC,GAIrC,IAAK,IAAIA,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAID,EAAM,EAAGA,EAAM,EAAGA,IACvB,GAAIP,EAASM,EAAaC,GAAKC,GAAMF,EAAaC,EAAM,GAAGC,EAAM,GAAIF,EAAaC,EAAM,GAAGC,EAAM,GAAIF,EAAaC,EAAM,GAAGC,EAAM,IAC7H,OAAOF,EAAaC,GAAKC,GAIrC,MAAO,IAGLC,EAAe,SAACC,GAClBX,GAAS,SAAAY,GAAS,kCACXA,GADW,IAEdpB,SAAUmB,EACVlB,cAAc,EACdC,WAAW,EACXE,aAAc,EACdP,WAAY,IAAIR,MAAM,GAAGS,KAAK,IAAIT,MAAM,GAAGS,KAAK,OAChDO,QAAS,CAAC,CAACN,WAAY,MAAOsB,aAAc,IAAIhC,MAAM,GAAGS,KAAK,IAAIT,MAAM,GAAGS,KAAK,eAYlFwB,EAAW,SAACC,GACd,IAAMC,EAAYjB,EAAMV,WAAWL,KAAI,SAACiC,GACpC,OAAOA,EAAIC,WAGf,IAAwC,IAArCF,EAAUD,GAAQI,QAAQ,MAAe,CACxC,IAAIC,EAAUJ,EAAUD,GAAQM,UAChCD,EAAQA,EAAQD,QAAQ,OAASpB,EAAMR,WACvC6B,EAAQC,UAEgB,QAArBtB,EAAMR,YACLS,GAAS,SAAAY,GAAS,kCACXA,GADW,IAEdhB,aAAcG,EAAMH,aAAe,EACnCC,QAAQ,GAAD,mBAAME,EAAMF,SAAZ,CAAqB,CAACN,WAAYQ,EAAMR,WAAYsB,aAAcG,UAIjFhB,GAAS,SAAAY,GAAS,kCACXA,GADW,IAEdrB,WAAkC,QAArBQ,EAAMR,WAAwB,OAAS,MACpDF,WAAY2B,SAmGxB,OAtBAM,qBAAU,WACN,IAAI3B,EAASW,EAAYP,EAAMV,YAC/B,GAAGU,EAAMJ,SAAWA,EAChBK,GAAS,SAAAY,GAAS,kCACXA,GADW,IAEdjB,OAAQA,EACRG,YAAY,GAAD,mBAAMC,EAAMD,aAAZ,CAAyBH,cAErC,GAAsB,OAAnBI,EAAMP,UAA0C,SAArBO,EAAMR,WAAuB,CAE9D,IADA,IAAIgC,GAAa,GACI,IAAfA,GAAkB,CACpB,IAAIC,EAAOC,KAAKC,MAAuB,EAAhBD,KAAKE,UAExBJ,GADyC,IAA1CxB,EAAMV,WAAWmC,GAAML,QAAQ,MAClBK,GAEC,EAGrBV,EAASS,MAEd,CAACjB,EAAaP,EAAMV,WAAYU,EAAMJ,OAAQI,EAAMP,SAAUO,EAAMR,WAAYQ,EAAMD,YAAagB,IAGlG,sBAAKtC,UAAU,gBAAf,UACKuB,EAAMN,cACH,sBAAKjB,UAAU,qBAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,oBAAIA,UAAU,cAAd,wBACA,oBAAIA,UAAU,YAAd,SA5ETuB,EAAMF,QAAQb,KAAI,SAAC4C,EAAMC,GAC5B,IAAIC,EAAUD,EAAI,EACZE,EAAc,IAANF,EAAU,mBAAqB,eAAiBC,EAC9D,OACI,6BACI,wBAAQnD,QAAS,kBA5BjBqD,EA4B8BF,EA5BnBG,EA4B4BL,EAAKf,kBA3BxDb,GAAS,SAAAY,GAAS,kCACXA,GADW,IAEdf,QAASE,EAAMF,QAAQqB,MAAM,EAAGc,GAChC3C,WAAY4C,OAJL,IAACD,EAAWC,GA4BX,SAA4DF,KADvDD,WA4EL,qBAAKtD,UAAU,gBAAf,SACI,qBAAKA,UAAU,QAAf,SA9FTuB,EAAMV,WAAWL,KAAI,SAACC,EAAG4C,GAE5B,OADAK,QAAQC,IAAIN,GAER,cAAC,EAAD,CAEI/C,MAAOiB,EAAMV,WAAWwC,GACxBjD,YAAa,kBAlDRmC,EAkD0Bc,OAjDvB,KAAjB9B,EAAMJ,QACLmB,EAASC,IAFG,IAACA,IAgDAc,UA8FL,sBAAKrD,UAAU,sBAAf,UACI,oBAAIA,UAAU,WAAd,yBACA,oBAAIA,UAAU,UAAd,SA5DTuB,EAAMD,YAAYd,KAAI,SAACW,EAAQkC,GAClC,GAAc,KAAXlC,EAGH,MAAc,QAAXA,EACQ,qBAAYnB,UAAU,WAAtB,UAAkCmB,EAAlC,UAASkC,GAET,qBAAYrD,UAAU,YAAtB,UAAmCmB,EAAnC,UAASkC,cA2DpB,sBAAKrD,UArDU,WACnB,IAAI4D,EAAY,SAIhB,MAHoB,KAAjBrC,EAAMJ,SACLyC,EAAY,eAETA,EAgDaC,GAAhB,UAAmCtC,EAAMJ,OAAzC,WACCI,EAAML,WACH,qBAAKlB,UAAU,YAAf,SAA2B,kDAE5BuB,EAAMN,cAAiC,KAAjBM,EAAMJ,OAM3B,qBAAKnB,UAAU,aAAf,SACI,wBAAQA,UAAU,YAAYG,QA7F7B,WACbqB,GAAS,SAAAY,GAAS,kCACXA,GADW,IAEdvB,WAAY,IAAIR,MAAM,GAAGS,KAAK,IAAIT,MAAM,GAAGS,KAAK,OAChDC,WAAY,MACZC,SAAU,GACVC,cAAc,EACdC,WAAW,EACXC,OAAQ,GACRC,aAAc,EACdC,QAAS,GACTC,YAAc,SAkFN,0BANJ,sBAAKtB,UAAU,aAAf,UACI,wBAAQA,UAAU,YAAYG,QAAS,kBAAM+B,EAAa,UAA1D,wBACA,wBAAQlC,UAAU,YAAYG,QAAS,kBAAM+B,EAAa,OAA1D,4BCnNL4B,EARH,WACV,OACE,qBAAK9D,UAAU,MAAf,SACI,cAAC,EAAD,OCIO+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ccee67ee.chunk.js","sourcesContent":["\r\nconst TileHole = (props) => {\r\n    return (\r\n        <div className=\"TileHole\">\r\n            <div className={props.value}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TileHole;","import TileHole from './TileHole';\r\n\r\nconst Tile = (props) => {\r\n    return (\r\n        <div className=\"Tile\" onClick={() => props.handleClick()}>\r\n            {\r\n                [...Array(props.holes.length)].map((x, j) => \r\n                    <TileHole key={j} value={props.holes[j]}></TileHole>)\r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tile;","import React, {useState, useEffect} from 'react';\r\nimport Tile from './Tile';\r\n\r\nconst Board = () => {\r\n    const [state, setState] = useState({\r\n        boardState: new Array(7).fill(new Array(6).fill(null)),\r\n        playerTurn: 'Red',\r\n        gameMode: '',\r\n        gameSelected: false,\r\n        showTitle: true,\r\n        winner: '',\r\n        current_move: 0,\r\n        history: [],\r\n        win_history : []\r\n    })\r\n\r\n    /* checks if col contain tile */\r\n    const checkCol = (a, b, c, d) => {\r\n        return ((a !== null) && (a === b) && (a === c) && (a === d));\r\n    }\r\n\r\n    /* get tiles and check for winner */\r\n    const checkWinner = (currentTiles) => {\r\n        for (let col = 0; col < 7; col++) {\r\n            for (let row = 0; row < 4; row++) {\r\n                if (checkCol(currentTiles[col][row], currentTiles[col][row + 1], currentTiles[col][row + 2], currentTiles[col][row + 3])) {\r\n                    return currentTiles[col][row];\r\n                }\r\n            }\r\n        }\r\n        for (let row = 0; row < 6; row++) {\r\n            for (let col = 0; col < 4; col++) {\r\n                if (checkCol(currentTiles[col][row], currentTiles[col + 1][row], currentTiles[col + 2][row], currentTiles[col + 3][row])) {\r\n                    return currentTiles[col][row];\r\n                }\r\n            }\r\n        }\r\n        for (let row = 0; row < 3; row++) {\r\n            for (let col = 0; col < 4; col++) {\r\n                if (checkCol(currentTiles[col][row], currentTiles[col + 1][row + 1], currentTiles[col + 2][row + 2], currentTiles[col + 3][row + 3])) {\r\n                    return currentTiles[col][row];\r\n                }\r\n            }\r\n        }\r\n        for (let row = 0; row < 4; row++) {\r\n            for (let col = 3; col < 6; col++) {\r\n                if (checkCol(currentTiles[col][row], currentTiles[col - 1][row + 1], currentTiles[col - 2][row + 2], currentTiles[col - 3][row + 3])) {\r\n                    return currentTiles[col][row];\r\n                }\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n    /* set game mode on button click */\r\n    const selectedGame = (mode) => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            gameMode: mode,\r\n            gameSelected: true, \r\n            showTitle: false,\r\n            current_move: 0,\r\n            boardState: new Array(7).fill(new Array(6).fill(null)),\r\n            history: [{playerTurn: 'Red', currentBoard: new Array(7).fill(new Array(6).fill(null))}],\r\n        }));\r\n    }\r\n\r\n    /* move only if winner doesn't exist */\r\n    const handleClick = (slatID) => {\r\n        if(state.winner === ''){\r\n            makeMove(slatID);\r\n        }\r\n    }\r\n    \r\n    /* move slat */\r\n    const makeMove = (slatID) => {\r\n        const boardCopy = state.boardState.map((arr) => {\r\n            return arr.slice();\r\n        });\r\n\r\n        if(boardCopy[slatID].indexOf(null) !== -1 ) {\r\n            let newSlat = boardCopy[slatID].reverse();\r\n            newSlat[newSlat.indexOf(null)] = state.playerTurn;\r\n            newSlat.reverse();\r\n\r\n            if(state.playerTurn === 'Red') {\r\n                setState(prevState => ({\r\n                    ...prevState,\r\n                    current_move: state.current_move + 1, \r\n                    history: [...state.history, {playerTurn: state.playerTurn, currentBoard: boardCopy}],\r\n                }));\r\n            }\r\n\r\n            setState(prevState => ({\r\n                ...prevState,\r\n                playerTurn: (state.playerTurn === 'Red') ? 'Blue' : 'Red',\r\n                boardState: boardCopy, \r\n            }));\r\n        }\r\n    }\r\n\r\n    /* jump to previous turn*/\r\n    const jumpTo = (turnIndex, board) => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            history: state.history.slice(0, turnIndex),\r\n            boardState: board\r\n        }));\r\n    }\r\n    \r\n    const generateBoard = () => {\r\n        \r\n        return state.boardState.map((x, i) => {\r\n            console.log(i);\r\n            return(\r\n                <Tile \r\n                    key={i}\r\n                    holes={state.boardState[i]}\r\n                    handleClick={() => handleClick(i)}\r\n                ></Tile>\r\n            )\r\n        });\r\n    }\r\n\r\n    const generateMoves = () => {\r\n        return state.history.map((turn, i) => {\r\n            let moveNum = i + 1;\r\n            const desc =  i === 0 ? 'Go to game start' : 'Go to Turn #' + moveNum;\r\n            return (\r\n                <li key={moveNum}>\r\n                    <button onClick={() => jumpTo(moveNum, turn.currentBoard)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n    }\r\n\r\n    const goToMenu = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            boardState: new Array(7).fill(new Array(6).fill(null)),\r\n            playerTurn: 'Red',\r\n            gameMode: '',\r\n            gameSelected: false,\r\n            showTitle: true,\r\n            winner: '',\r\n            current_move: 0,\r\n            history: [],\r\n            win_history : []\r\n        }));\r\n    }\r\n\r\n    const generateWinners = () => {\r\n        return state.win_history.map((winner, i) => {\r\n            if(winner === \"\") {\r\n                return;\r\n            }\r\n            if(winner === \"Red\") {\r\n                return(<li key={i} className=\"redTitle\">{winner} wins</li>);\r\n            } else {\r\n                return(<li key={i} className=\"blueTitle\">{winner} wins</li>);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    const generateBanner = () => {\r\n        let newWinMsg = \"winMsg\"\r\n        if(state.winner !== \"\"){\r\n            newWinMsg = \"winMsg show\";\r\n        }\r\n        return newWinMsg;\r\n    }\r\n\r\n    useEffect(() => {\r\n        let winner = checkWinner(state.boardState)\r\n        if(state.winner !== winner) {\r\n            setState(prevState => ({\r\n                ...prevState, \r\n                winner: winner, \r\n                win_history: [...state.win_history, winner],\r\n            }));\r\n        } else if(state.gameMode === 'ai' && state.playerTurn === 'Blue') {\r\n            let validMove = -1;\r\n            while(validMove === -1) {\r\n                let tile = Math.floor((Math.random() * 7));\r\n                if(state.boardState[tile].indexOf(null) !== -1) {\r\n                    validMove = tile;\r\n                } else{\r\n                    validMove = -1;\r\n                }\r\n            }\r\n            makeMove(validMove);\r\n        }\r\n    }, [checkWinner, state.boardState, state.winner, state.gameMode, state.playerTurn, state.win_history, makeMove]);\r\n\r\n    return (\r\n        <div className=\"GameBoard row\">\r\n            {state.gameSelected &&\r\n                <div className=\"BoardContainer row\">\r\n                    <div className=\"Game-Moves column\">\r\n                        <h4 className=\"MovesTitle \">Game Moves</h4>\r\n                        <ol className=\"MovesList\">\r\n                            {generateMoves()}\r\n                        </ol>\r\n                    </div>\r\n                    <div className=\"double-column\">\r\n                        <div className=\"Board\">\r\n                            {generateBoard()}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"Game-History column\">\r\n                        <h4 className=\"WinTitle\">Win History</h4>\r\n                        <ol className=\"WinList\">\r\n                            {generateWinners()}\r\n                        </ol>\r\n                    </div>\r\n                </div>\r\n            }\r\n            <div className={generateBanner()}>{state.winner} wins</div>\r\n            {state.showTitle && \r\n                <div className=\"GameTitle\"><h1>Connect 4 Game</h1></div> \r\n            }\r\n            {(!state.gameSelected || state.winner !== '') ?\r\n                <div className=\"ui-row row\">\r\n                    <button className=\"ui-button\" onClick={() => selectedGame('human')}>Play Human</button>\r\n                    <button className=\"ui-button\" onClick={() => selectedGame('ai')}>Play AI</button>\r\n                </div>\r\n                :\r\n                <div className=\"ui-row row\">\r\n                    <button className=\"ui-button\" onClick={goToMenu}>Go To Menu</button>\r\n                </div>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","import './App.css';\nimport './css/Board.css';\n\nimport Board from './components/Board';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n        <Board></Board>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}